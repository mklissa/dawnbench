[metrics_parameters_inference]
patterns = ['Prediction-Time: (\d+\.\d+|\d+) milliseconds']
metrics = ['prediction_time']
compute_method = ['average']

[metrics_parameters_imperative_hybrid_top_1]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'training: accuracy=(\d+\.\d+|\d+)', 'validation: accuracy=(\d+\.\d+|\d+)', 'time cost: (\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'validation_acc', 'total_training_time']
compute_method = ['average', 'last', 'last', 'total']

[metrics_parameters_images_top_1]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)' ]
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total', 'last']

[metrics_parameters_images_top_5]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)', 'Train-top_k_accuracy_5=(\d+\.\d+|\d+)','Validation-top_k_accuracy_5=(\d+\.\d+|\d+)' ]
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc','Train-top_k_accuracy_5','Validation-top_k_accuracy_5']
compute_method = ['average', 'last', 'total', 'last','last','last']

[metrics_parameters_dawnbench]
patterns = ['Epoch \d+, Batch \d+, Speed=(\d+\.\d+|\d+)', 'Epoch \d+, Training accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Validation accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Duration=(\d+\.\d+|\d+)', 'Inference. Batch \d+, Latency=(\d+\.\d+|\d+) ms', 'Inference. Batch \d+, Latency=\d+\.\d+ ms, Speed=(\d+\.\d+|\d+)']
metrics = ['training_throughput', 'training_acc', 'validation_acc', 'training_duration', 'inference_latency', 'inference_throughput']
compute_method = ['average', 'last', 'last', 'total', 'average', 'average']

[resnet50_cifar10_symbolic]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)' ]
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total', 'last']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --mode symbolic --gpus 8 --epochs 20 --log-interval 50 --kvstore device
num_gpus = 8

[resnet50_cifar10_symbolic_fp16_batch_size64]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --mode symbolic --gpus 8 --epochs 20 --log-interval 50 --dtype float16 --batch-size 64 --kvstore device
num_gpus = 8

[resnet50_cifar10_symbolic_fp32_batch_size32]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --mode symbolic --gpus 8 --epochs 20 --log-interval 50 --batch-size 32  --kvstore device
num_gpus = 8

[resnet50_cifar10_symbolic_fp16_batch_size32]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --mode symbolic --gpus 8 --epochs 20 --log-interval 50 --dtype float16 --batch-size 32 --kvstore device
num_gpus = 8

[resnet50_cifar10_symbolic_fp32_batch_size16]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --mode symbolic --gpus 8 --epochs 20 --log-interval 50 --batch-size 16 --kvstore device
num_gpus = 8

[resnet50_cifar10_symbolic_fp32_batch_size64]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --mode symbolic --gpus 8 --epochs 20 --log-interval 50 --batch-size 64 --kvstore device
num_gpus = 8

[resnet50_cifar10_hybrid]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'training: accuracy=(\d+\.\d+|\d+)', 'validation: accuracy=(\d+\.\d+|\d+)', 'time cost: (\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'validation_acc', 'total_training_time']
compute_method = ['average', 'last', 'last', 'total']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --mode hybrid --gpus 8 --epochs 20 --log-interval 50 --kvstore device
num_gpus = 8

[resnet50_cifar10_imperative]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'training: accuracy=(\d+\.\d+|\d+)', 'validation: accuracy=(\d+\.\d+|\d+)', 'time cost: (\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'validation_acc', 'total_training_time']
compute_method = ['average', 'last', 'last', 'total']
command_to_execute = python image_classification/image_classification.py --model resnet50_v1 --dataset cifar10 --gpus 8 --epochs 20 --log-interval 50 --kvstore device
num_gpus = 8

[dawnbench_cifar10_resnet164_basic_gluon]
patterns = ['Epoch \d+, Batch \d+, Speed=(\d+\.\d+|\d+)', 'Epoch \d+, Training accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Validation accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Duration=(\d+\.\d+|\d+)', 'Inference. Batch \d+, Latency=(\d+\.\d+|\d+) ms', 'Inference. Batch \d+, Latency=\d+\.\d+ ms, Speed=(\d+\.\d+|\d+)']
metrics = ['training_throughput', 'training_acc', 'validation_acc', 'training_duration', 'inference_latency', 'inference_throughput']
compute_method = ['average', 'last', 'last', 'total', 'average', 'average']
command_to_execute = python dawnbench/experiments/resnet164_basic_gluon.py --gpu-idxs=0
num_gpus = 1

[dawnbench_cifar10_resnet164_basic_gluon_hybrid]
patterns = ['Epoch \d+, Batch \d+, Speed=(\d+\.\d+|\d+)', 'Epoch \d+, Training accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Validation accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Duration=(\d+\.\d+|\d+)', 'Inference. Batch \d+, Latency=(\d+\.\d+|\d+) ms', 'Inference. Batch \d+, Latency=\d+\.\d+ ms, Speed=(\d+\.\d+|\d+)']
metrics = ['training_throughput', 'training_acc', 'validation_acc', 'training_duration', 'inference_latency', 'inference_throughput']
compute_method = ['average', 'last', 'last', 'total', 'average', 'average']
command_to_execute = python dawnbench/experiments/resnet164_basic_gluon_hybrid.py --gpu-idxs=0
num_gpus = 1

[dawnbench_cifar10_resnet164_basic_module]
patterns = ['Epoch \d+, Batch \d+, Speed=(\d+\.\d+|\d+)', 'Epoch \d+, Training accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Validation accuracy=(\d+\.\d+|\d+)', 'Epoch \d+, Duration=(\d+\.\d+|\d+)', 'Inference. Batch \d+, Latency=(\d+\.\d+|\d+) ms', 'Inference. Batch \d+, Latency=\d+\.\d+ ms, Speed=(\d+\.\d+|\d+)']
metrics = ['training_throughput', 'training_acc', 'validation_acc', 'training_duration', 'inference_latency', 'inference_throughput']
compute_method = ['average', 'last', 'last', 'total', 'average', 'average']
command_to_execute = python dawnbench/experiments/resnet164_basic_module.py --gpu-idxs=0
num_gpus = 1

[dawnbench_cifar10_resnet164_basic_module_infer]
patterns = ['Inference. Batch \d+, Latency=(\d+\.\d+|\d+) ms', 'Inference. Batch \d+, Latency=\d+\.\d+ ms, Speed=(\d+\.\d+|\d+)']
metrics = ['inference_latency', 'inference_throughput']
compute_method = ['average', 'average']
command_to_execute = python dawnbench/experiments/resnet164_basic_module_infer.py
num_gpus = 0

[dawnbench_cifar10_resnet164_basic_gluon_infer]
patterns = ['Inference. Batch \d+, Latency=(\d+\.\d+|\d+) ms', 'Inference. Batch \d+, Latency=\d+\.\d+ ms, Speed=(\d+\.\d+|\d+)']
metrics = ['inference_latency', 'inference_throughput']
compute_method = ['average', 'average']
command_to_execute = python dawnbench/experiments/resnet164_basic_gluon_infer.py
num_gpus = 0

[dawnbench_cifar10_resnet164_basic_gluon_hybrid_infer]
patterns = ['Inference. Batch \d+, Latency=(\d+\.\d+|\d+) ms', 'Inference. Batch \d+, Latency=\d+\.\d+ ms, Speed=(\d+\.\d+|\d+)']
metrics = ['inference_latency', 'inference_throughput']
compute_method = ['average', 'average']
command_to_execute = python dawnbench/experiments/resnet164_basic_gluon_hybrid_infer.py
num_gpus = 0

[lstm_ptb_imperative]
patterns = ['time cost (\d+\.\d+|\d+)', 'valid loss (\d+\.\d+|\d+)', 'valid ppl (\d+\.\d+|\d+)', 'test loss (\d+\.\d+|\d+)', 'test ppl (\d+\.\d+|\d+)']
metrics = ['total_training_time', 'validation_loss', 'validation_perplexity', 'test_loss', 'test_perplexity']
compute_method = ['total', 'last', 'last', 'last', 'last']
command_to_execute = python word_language_model/word_language_model.py --gpus 8 --nhid 650 --emsize 650 --dropout 0.5 --epochs 40 --data word_language_model/data/ptb. --mode imperative --kvstore device
num_gpus = 8

[lstm_ptb_hybrid]
patterns = ['time cost (\d+\.\d+|\d+)', 'valid loss (\d+\.\d+|\d+)', 'valid ppl (\d+\.\d+|\d+)', 'test loss (\d+\.\d+|\d+)', 'test ppl (\d+\.\d+|\d+)']
metrics = ['total_training_time', 'validation_loss', 'validation_perplexity', 'test_loss', 'test_perplexity']
compute_method = ['total', 'last', 'last', 'last', 'last']
command_to_execute = python word_language_model/word_language_model.py --gpus 8 --nhid 650 --emsize 650 --dropout 0.5 --epochs 40 --data word_language_model/data/ptb. --mode hybrid --kvstore device
num_gpus = 8

[lstm_ptb_symbolic]
patterns = ['Time cost=(\d+\.\d+|\d+)', 'Train-perplexity=(\d+\.\d+|\d+)', 'Validation-perplexity=(\d+\.\d+|\d+)', 'Speed: (\d+\.\d+|\d+) samples/sec']
metrics = ['total_training_time', 'train_perplexity', 'validation_perplexity', 'speed']
compute_method = ['total', 'last', 'last', 'average']
command_to_execute = python word_language_model/lstm_bucketing.py --num-hidden 650 --num-embed 650 --gpus 8 --epochs 25 --kv-store device
num_gpus = 8

[resnet50_imagenet_symbolic_fp16_batch_size32_p3_16]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3,4,5,6,7 --batch-size 256 --data-nthreads 15 --num-epochs 80 --dtype float16
num_gpus = 1

[resnet50_imagenet_symbolic_fp16_batch_size64_p3_16]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3,4,5,6,7 --batch-size 512 --data-nthreads 15 --num-epochs 80 --dtype float16
num_gpus = 1

[resnet50_imagenet_symbolic_fp16_batch_size128_p3_16]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3,4,5,6,7 --batch-size 1024 --data-nthreads 32 --num-epochs 80 --dtype float16
num_gpus = 1

[resnet50_imagenet_symbolic_fp32_batch_size32_p3_16]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3,4,5,6,7 --batch-size 256 --data-nthreads 15 --num-epochs 80
num_gpus = 1

[resnet50_imagenet_symbolic_fp32_batch_size64_p3_16]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3,4,5,6,7 --batch-size 512 --data-nthreads 15 --num-epochs 80
num_gpus = 1

[resnet50_imagenet_symbolic_fp16_batch_size32_p3_8]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3 --batch-size 256 --data-nthreads 15 --num-epochs 80 --dtype float16
num_gpus = 1

[resnet50_imagenet_symbolic_fp16_batch_size64_p3_8]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3 --batch-size 512 --data-nthreads 15 --num-epochs 80 --dtype float16
num_gpus = 1

[resnet50_imagenet_symbolic_fp32_batch_size32_p3_8]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3 --batch-size 256 --data-nthreads 15 --num-epochs 80
num_gpus = 1

[resnet50_imagenet_symbolic_fp32_batch_size64_p3_8]
patterns = ['Speed: (\d+\.\d+|\d+) samples/sec', 'Train-accuracy=(\d+\.\d+|\d+)', 'Time cost=(\d+\.\d+|\d+)', 'Validation-accuracy=(\d+\.\d+|\d+)']
metrics = ['speed', 'training_acc', 'total_training_time', 'validation_acc']
compute_method = ['average', 'last', 'total','last']
command_to_execute = python /home/ubuntu/mxnet/example/image-classification/train_imagenet.py --data-train /home/ubuntu/imagenet/imagenet1k-train.rec --data-val /home/ubuntu/imagenet/imagenet1k-val.rec --gpus 1,0,2,3 --batch-size 512 --data-nthreads 15 --num-epochs 80
num_gpus = 1

[tensorflow_resnet50_p3_2xlg]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=1 --batch_size=32 --model=resnet50 --variable_update=parameter_server --print_training_accuracy=True --num_batches=100
num_gpus = 1

[tensorflow_resnet50_p3_8xlg]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=4 --batch_size=32 --model=resnet50 --variable_update=parameter_server --print_training_accuracy=True --num_batches=100
num_gpus = 4

[tensorflow_resnet50_p3_16xlg]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=8 --batch_size=32 --model=resnet50 --variable_update=parameter_server --print_training_accuracy=True --num_batches=100
num_gpus = 8

[tensorflow_resnet152_p3_2xlg]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Training']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=1 --batch_size=32 --model=resnet152 --variable_update=parameter_server --print_training_accuracy=True --num_batches=100
num_gpus = 1

[tensorflow_resnet152_p3_8xlg]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Training']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=4 --batch_size=32 --model=resnet152 --variable_update=parameter_server --print_training_accuracy=True --num_batches=100
num_gpus = 4

[tensorflow_resnet152_p3_16xlg]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Training time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=8 --batch_size=32 --model=resnet152 --variable_update=parameter_server --print_training_accuracy=True --num_batches=100
num_gpus = 8

[tensorflow_resnet56_p3_2xlg_fp16]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Training time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=cifar10 --data_dir=cifar-10-batches-py --num_gpus=1 --batch_size=32 --model=resnet56 --variable_update=replicated --print_training_accuracy=True --use_fp16=True --use_tf_layers=False --target_accuracy=0.94
num_gpus = 1

[tensorflow_resnet56_p3_8xlg_fp16]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Training time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=cifar10 --data_dir=cifar-10-batches-py --num_gpus=4 --batch_size=32 --model=resnet56 --variable_update=replicated --print_training_accuracy=True --use_fp16=True --use_tf_layers=False --target_accuracy=0.94
num_gpus = 4

[tensorflow_resnet56_p3_16xlg_fp16]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Training time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=cifar10 --data_dir=cifar-10-batches-py --num_gpus=8 --batch_size=32 --model=resnet56 --variable_update=replicated --print_training_accuracy=True --use_fp16=True --use_tf_layers=False --target_accuracy=0.94
num_gpus = 8

[tensorflow_resnet50_p3_2xlg_fp16]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=1 --batch_size=32 --model=resnet50 --variable_update=replicated --print_training_accuracy=True --num_batches=100 --use_fp16=True --use_tf_layers=False
num_gpus = 1

[tensorflow_resnet50_p3_8xlg_fp16]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=4 --batch_size=32 --model=resnet50 --variable_update=replicated --print_training_accuracy=True --num_batches=100 --use_fp16=True --use_tf_layers=False
num_gpus = 4

[tensorflow_resnet50_p3_16xlg_fp16]
patterns = ['images/sec: (\d+\.\d+)', 'time: (\d+\.\d+)']
metrics = ['Images per sec', 'Time']
compute_method = ['average', 'last']
command_to_execute = python tensorflow_benchmark/tf_cnn_benchmarks/tf_cnn_benchmarks.py --data_name=imagenet --num_gpus=8 --batch_size=32 --model=resnet50 --variable_update=replicated --print_training_accuracy=True --num_batches=100 --use_fp16=True --use_tf_layers=False
num_gpus = 8

